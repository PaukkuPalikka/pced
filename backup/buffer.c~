/* buffer.c */

#include <stdlib.h>
#include <string.h>

#include "buffer.h"

/* private function definitions */
void head_append(buffer *b, char c);
char head_delete(buffer *b);
void tail_prepend(buffer *b, char c);
char tail_delete(buffer *b);

/* public function implementations */

buffer* buffer_alloc()
{
	/* allocate and initialize memory */
	buffer *b = malloc(sizeof(buffer));
	if (b == NULL) return NULL;
	memset(b, 0, sizeof(buffer));

	b->head_length = 0;
	b->head_size = 1024;
	b->tail_length = 0;
	b->tail_size = 1024;
	
	/* allocate head and tail buffers */
	if ((b->head = malloc(b->head_size)) == NULL) {
		free(b);
		return NULL;
	}
	if ((b->tail = malloc(b->tail_size)) == NULL) {
		free(b->head);
		free(b);
		return NULL;
	}

	/* initialize them */
	memset(b->head, 0, b->head_size);
	memset(b->tail, 0, b->tail_size);
}

void buffer_free(buffer *b)
{
	/* free the head and tail buffers */
	free(b->head);
	free(b->tail);
	/* free the buffer object */
	free(b);
}

void buffer_insert(buffer *b, int id, char c)
{
	
}

void buffer_delete(buffer *b, int id)
{

}

void buffer_move(int id)
{

}

/* private function implementations */

